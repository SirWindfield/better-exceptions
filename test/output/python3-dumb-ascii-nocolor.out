python3 test/test.py


LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
Traceback (most recent call last):
  File "test/test.py", line 17, in <module>
    shallow(bar, 15)
    |       -> 2
    -> <function shallow at 0xDEADBEEF>
  File "test/test.py", line 8, in shallow
    deep(a + b)
    |    |   -> 15
    |    -> 2
    -> <function deep at 0xDEADBEEF>
  File "test/test.py", line 13, in deep
    assert val > 10 and foo == 60
           |            -> 52
           -> 17
AssertionError: assert val > 10 and foo == 60



python3 test/test_color.py


False



python3 test/test_encoding.py


LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
Traceback (most recent call last):
  File "test/test_encoding.py", line 14, in <module>
    div()
    -> <function div at 0xDEADBEEF>
  File "test/test_encoding.py", line 11, in div
    return _deep("天")
           -> <function _deep at 0xDEADBEEF>
  File "test/test_encoding.py", line 8, in _deep
    return 1 / val
               -> '天'
TypeError: unsupported operand type(s) for /: 'int' and 'str'



./test/test_interactive.sh


spawn python3 -m better_exceptions -q
sh: warning: setlocale: LC_ALL: cannot change locale (en_US.ascii)
LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
>>> import better_exceptions
>>> def foo(a):
...     assert a > 10
... 
>>> foo(1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
    foo(1)
    -> <function foo at 0xDEADBEEF>
  File "<console>", line 2, in foo
    assert a > 10
           -> 1
AssertionError: assert a > 10
>>> exit()



./test/test_string.sh



import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine

/bin/sh: warning: setlocale: LC_ALL: cannot change locale (en_US.ascii)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine
                              |                         |             -> 5
                              |                         -> 5
                              -> <module 'test_module' from '/removed/for/test/purposes.py'>
AssertionError: import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine
LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]

/bin/sh: warning: setlocale: LC_ALL: cannot change locale (en_US.ascii)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine
                              |                         |             -> 5
                              |                         -> 5
                              -> <module 'test_module' from '/removed/for/test/purposes.py'>
AssertionError: import better_exceptions; better_exceptions.hook(); a = 5; assert a > 10 # this should work fine
LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]

from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False

/bin/sh: warning: setlocale: LC_ALL: cannot change locale (en_US.ascii)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False
                                                                     |                         |                            -> 'why hello there'
                                                                     |                         -> 'why hello there'
                                                                     -> <module 'test_module' from '/removed/for/test/purposes.py'>
AssertionError: from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False
LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
why hello there

/bin/sh: warning: setlocale: LC_ALL: cannot change locale (en_US.ascii)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False
                                                                     |                         |                            -> 'why hello there'
                                                                     |                         -> 'why hello there'
                                                                     -> <module 'test_module' from '/removed/for/test/purposes.py'>
AssertionError: from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why hello there"; print(a); assert False
LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
why hello there

from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False

/bin/sh: warning: setlocale: LC_ALL: cannot change locale (en_US.ascii)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False
                                                                     |                         |                                                 -> 'why     hello             there'
                                                                     |                         -> 'why     hello             there'
                                                                     -> <module 'test_module' from '/removed/for/test/purposes.py'>
AssertionError: from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False
LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
why     hello             there

/bin/sh: warning: setlocale: LC_ALL: cannot change locale (en_US.ascii)
Traceback (most recent call last):
  File "<string>", line 1, in <module>
    from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False
                                                                     |                         |                                                 -> 'why     hello             there'
                                                                     |                         -> 'why     hello             there'
                                                                     -> <module 'test_module' from '/removed/for/test/purposes.py'>
AssertionError: from __future__ import print_function; import better_exceptions; better_exceptions.hook(); a = "why     hello          " + "   there"; print(a); assert False
LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
why     hello             there



python3 test/test_logging.py


ERROR:__main__:callback failed
Traceback (most recent call last):
  File "test/test_logging.py", line 16, in foo
    cb()
    -> <function bar3 at 0xDEADBEEF>
  File "test/test_logging.py", line 33, in bar3
    raise Exception('this is a test exception')
Exception: this is a test exception

ERROR:__main__:callback failed
Traceback (most recent call last):
  File "test/test_logging.py", line 16, in foo
    cb()
    -> <function bar4 at 0xDEADBEEF>
  File "test/test_logging.py", line 38, in bar4
    assert baz == 90
           -> 52
AssertionError: assert baz == 90

LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>, <StreamHandler <stderr> (NOTSET)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>, <StreamHandler <stderr> (NOTSET)>]



python3 test/test_truncating.py


LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
Traceback (most recent call last):
  File "test/test_truncating.py", line 12, in <module>
    div()
    -> <function ...
  File "test/test_truncating.py", line 9, in div
    return 1 / var
               -> '999999999...
TypeError: unsupported operand type(s) for /: 'int' and 'str'



python3 test/test_truncating_disabled.py


LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
Traceback (most recent call last):
  File "test/test_truncating_disabled.py", line 12, in <module>
    div()
    -> <function div at 0xDEADBEEF>
  File "test/test_truncating_disabled.py", line 9, in div
    return 1 / var
               -> '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'
TypeError: unsupported operand type(s) for /: 'int' and 'str'



python3 test/test_indentation_error.py


LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
Traceback (most recent call last):
  File "test/test_indentation_error.py", line 13, in <module>
    exec(code)
         -> '\nif True:\n    a = 5\n        print("foobar")  #intentional faulty indentation here.\n    b = 7\n'
File "<string>", line 4
    print("foobar")  #intentional faulty indentation here.
    ^
IndentationError: unexpected indent



python3 test/test_syntax_error.py


LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
Traceback (most recent call last):
  File "test/test_syntax_error.py", line 12, in <module>
    exec(code)
         -> '\nif True:\n    a = 5\n    b = 7 *\n'
File "<string>", line 4
    b = 7 *
          ^
SyntaxError: invalid syntax



python3 test/test_without_colors.py


LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>, <FileHandler /mnt/f/funds/better-exception/example.log (NOTSET)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]



python3 test/test_chaining.py


LOGGERS BEFORE
[<_StderrHandler <stderr> (WARNING)>]
LOGGERS AFTER
[<_StderrHandler <stderr> (WARNING)>]
Traceback (most recent call last):
  File "test/test_chaining.py", line 11, in cause
    div(x, y)
    |   |  -> 0
    |   -> 1
    -> <function div at 0xDEADBEEF>
  File "test/test_chaining.py", line 7, in div
    x / y
    |   -> 0
    -> 1
ZeroDivisionError: division by zero

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "test/test_chaining.py", line 17, in context
    cause(x, y)
    |     |  -> 0
    |     -> 1
    -> <function cause at 0xDEADBEEF>
  File "test/test_chaining.py", line 13, in cause
    raise ValueError("Division error")
ValueError: Division error

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "test/test_chaining.py", line 21, in <module>
    context(1, 0)
    -> <function context at 0xDEADBEEF>
  File "test/test_chaining.py", line 19, in context
    raise ValueError("Cause error") from e
ValueError: Cause error



